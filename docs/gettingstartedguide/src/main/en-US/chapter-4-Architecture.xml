<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-3735779">
    
    <title>Architecture</title>
    <section id="sid-3735778">
      
      <title>Define Information Model</title>
      <para>One of the stages within the architecture phase is to define the information model for the message types associated with the messages exchanges between the interacting participants.</para>
      <para>This involves defining message schema for each example message. The schema could already exist and be reused, it could be based on existing schema and just need to be upgraded to support new requirements, or it may need to be defined from scratch.</para>
      <para>
        An example of a schema associated with the purchasing model is the
        <code>store.xsd</code>
        shown here:
      </para>
      <informalexample>
        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.jboss.org/examples/store" xmlns:tns="http://www.jboss.org/examples/store" elementFormDefault="qualified"&gt;

    &lt;element name="BuyRequest" type="tns:BuyRequestType"&gt;&lt;/element&gt;
    &lt;element name="BuyConfirmed" type="tns:BuyConfirmedType"&gt;&lt;/element&gt;
    &lt;element name="AccountNotFound" type="tns:AccountNotFoundType"&gt;&lt;/element&gt;
    &lt;element name="BuyFailed" type="tns:BuyFailedType"&gt;&lt;/element&gt;

    &lt;complexType name="BuyRequestType"&gt;
        &lt;attribute name="id" type="string"&gt;&lt;/attribute&gt;
        &lt;attribute name="product" type="string"&gt;&lt;/attribute&gt;
        &lt;attribute name="customer" type="string"&gt;&lt;/attribute&gt;
    &lt;/complexType&gt;

    &lt;complexType name="BuyConfirmedType"&gt;
        &lt;attribute name="id" type="string"&gt;&lt;/attribute&gt;
        &lt;attribute name="amount" type="integer"&gt;&lt;/attribute&gt;
        &lt;attribute name="deliveryDate" type="date"&gt;&lt;/attribute&gt;
    &lt;/complexType&gt;
    
    &lt;complexType name="AccountNotFoundType"&gt;
        &lt;attribute name="id" type="string"&gt;&lt;/attribute&gt;
        &lt;attribute name="reason" type="string"&gt;&lt;/attribute&gt;
    &lt;/complexType&gt;
    
    &lt;complexType name="BuyFailedType"&gt;
        &lt;attribute name="id" type="string"&gt;&lt;/attribute&gt;
        &lt;attribute name="reason" type="string"&gt;&lt;/attribute&gt;
    &lt;/complexType&gt;
&lt;/schema&gt;</programlisting>
      </informalexample>
      <para>
        Once the schema has been defined, then the example messages need to be updated to reference the schema, as shown in the following
        <code>BuyRequest.xml</code>
        example message:
      </para>
      <informalexample>
        <programlisting>&lt;tns:BuyRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:tns="http://www.jboss.org/examples/store"
            xsi:schemaLocation="http://www.jboss.org/examples/store ../schema/store.xsd "
            id="1" product="Laptop" customer="Joe" /&gt;</programlisting>
      </informalexample>
      <section id="sid-3735778_DefineInformationModel-ValidatingExampleMessagesagainstSchema">
        
        <title>Validating Example Messages against Schema</title>
        <para>
          Once the association between example messages and the schema has been established, it is possible to validate the messages against the schema. Select the context menu associated with the XML file (e.g.
          <code>BuyRequest.xml</code>
          ), and choose the
          <emphasis role="italics">Validate</emphasis>
          menu item. You should see the following message displayed, and no errors or warnings appear in the Problems or Markers view:
        </para>
        <para>
          <figure>
<title>Dialog showing successful validation of the XML document against its schema</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/3735778/SchemaValidationResults+.png" width="3in" />
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>However, if we now introduce an error into this example message, for example change the attribute name 'customer' to 'customerX', and then perform the validation again, you will see an error has been reported:</para>
        <para>
          <figure>
<title>Error created when a schema validation problem is detected</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/3735778/SchemaValidationError.png" width="5in" />
              </imageobject>
            </mediaobject>
          </figure>
          
        </para>
        <note>
          <para>Don't forget to change the attribute name back to 'customer', and  re-validate the XML file, before proceeding - as we will need the  message be valid for the next section of the document.</para>
        </note>
        <para>
          
        </para>
        <para>
          For further information on how to use the validation capabilities within Eclipse, please read the
          <ulink url="http://www.eclipse.org/webtools/community/tutorials/XMLValidation/XMLValidationTutorial.html">Eclipse XML Validation Tutorial</ulink>
          .
        </para>
      </section>
    </section>
    <section id="sid-3735780">
      
      <title>Define Choreography Model</title>
      <para>The next step in the development process is to specify a Choreography Model to implement the requirements described within the set of scenarios. Information on how to build a choreography can be found in the User Guide.</para>
      <para>
        The choreography description for the Purchasing example can be found in
        <code>purchasing/architecture/PurchaseGoods.bpmn</code>
        , and looks like this:
        <figure>
<title>Example BPMN2 choreography representing a purchasing process</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="author/download/attachments/3735780/Purchasing.png" width="6in" />
            </imageobject>
          </mediaobject>
        </figure>
      </para>
      <section id="sid-3735780_DefineChoreographyModel-ValidatingRequirementsagainstChoreographyModel">
        
        <title>Validating Requirements against Choreography Model</title>
        <para>
          The SAVARA tools can be used to validate the scenarios against the choreography description, to ensure that the choreography correctly implements the requirements. To test the
          <code>requirements/SuccessfulPurchase.scn</code>
          scenario against the choreography, launch the scenario editor by double-clicking on the scenario file, and then pressing the green
          <emphasis role="italics">play</emphasis>
          button in the toolbar. This will display a dlalog window used to configure what models and simulators are used for each role in the scenario:
        </para>
        <para>
          <figure>
<title>Scenario simulation dialog</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/3735780/ScenarioSimulationDialog.png" width="3in" />
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>When simulating all roles against a single model (i.e. a choreography), then simply browser for the model (using the ... button) - which in this case is the PurchaseGoods.bpmn file in the same Eclipse project (architecture folder), and then when asked "Should model be set for all roles", press the "Yes" button. This will setup the simulation configuration for all roles:</para>
        <para>
          <figure>
<title>Scenario simulation dialog initialized with choreography simulation details</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/3735780/ScenarioSimulationDialogCompleted.png" width="3in" />
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>The simulators are all automatically initialised to "Protocol simulator", as this is the only simulator that supports the ".bpmn" type of model, and the model roles are initialised on a best guess basis. If the roles in the scenario are completely different names to the ones in the model (i.e. choreography), then the user will need to select the appropriate model roles to map from the scenario roles.</para>
        <para>When the "Simulate" button has been pressed, and the simulation is complete, the scenario should look like the following image, indicating that the scenario completed successfully.</para>
        <para>
          <figure>
<title>Simulation results showing the successful validation of a scenario against the choreography</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/3735780/SuccessfulPurchaseScenario.png" width="5in" />
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>
          To view a scenario that demonstrates a test failure, open the
          <code>requirements/InvalidStoreBehaviour.scn</code>
          scenario by double-clicking on the file, and then initiate the test using the green
          <emphasis role="italics">play</emphasis>
          button in the toolbar. When complete, the scenario should look like the following image.
        </para>
        <para>
          <figure>
<title>Simulation results showing validation issues between a scenario and choreography</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/3735780/InvalidStoreBehaviourScenario.png" width="5in" />
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>
          You will notice that the
          <emphasis role="italics">Store</emphasis>
          participant has a red 'send' node, indicating that this action was not expected behaviour when compared with the choreography description. The reason this is considered an error, is that the
          <emphasis role="italics">Store</emphasis>
          participant should only send an
          <emphasis role="italics">AccountNotFound</emphasis>
          message following a customer unknown response from the credit agency.
        </para>
        <para>When an error is detected in a scenario, the architect can then determine whether the scenario is wrong (i.e. it does not correctly describe a business requirement), or whether the choreography is wrong and needs to be updated to accommodate the scenario.</para>
      </section>
    </section>
  </chapter>
